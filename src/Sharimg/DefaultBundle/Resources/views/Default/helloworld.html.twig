{% extends "SharimgDefaultBundle::layout.html.twig" %}

{% block content %}
<div class="container">
    Hello world!
    {% for i in 0..19 %}
        <div class="line">
        {% for j in 0..9 %}
                <span id="p{{ i*10+j}}">&nbsp;</span>
        {% endfor %}
        </div>
    {% endfor %}
</div>
<div id="info">
    <p id="nbLines"><span>0</span> lines</p>
    <p id="score"><span>0</span> points</p>
</div>
{% endblock %}


{% block stylesheets %}
{{parent()}}
<style>
    .line{height:14px;}
    .line span {display:inline-block;width:10px;height:10px;margin:-1px;border:1px solid #eee;background-color:#eee;}
    .filled {background-color:#ccc !important;}
</style>
{% endblock %}


{% block javascripts %}
{{parent()}}
<script>
    var shapes=[[14,15,16,26]];
    function Tetris(width, height){        
        this.width=width;
        this.height=height;
        this.curShape=0;
        this.stop=true;
        this.speed=0;
        this.score=0;
        this.lines=0;
    }
    
    Tetris.prototype.init=function(){
        this.curShape=1;
        this.stop=false;
        this.speed=1000;
        this.score=0;
        this.lines=0;

        this.createShape(this.curShape);
        
        var parent=this;
        setTimeout(function(){parent.main()}, this.speed);
        $('body').bind('keypress', function(e){parent.keypress(e,parent)});
    }
    
    Tetris.prototype.main=function(){
        if(!this.moveS(this.curShape, 'down')){
            var test=this.testl();
            this.display();
            
            this.curShape++;
            this.createShape(this.curShape);

            if(!test&&!this.moveS(this.curShape, 'down')){
                alert('You loose');
                return;
            }
        }

        if (this.stop===false){
            var parent=this;
            if(this.speed>100){this.speed--;}
            //setTimeout(function(){parent.main()},this.speed);
        }
    }
    
    Tetris.prototype.keypress=function(e, parent){
        var code=e.keyCode || e.which;
        if(code == 13) { //Enter keycode
            stop=true;
        }else if(code == 32) { // Space keycode
        }else if(code == 112) { // p keycode
            stop=true;
        }else if(code == 110) { // N keycode
        }else if(code == 122) { // Z keycode
            parent.rotate(parent.curShape);
        }else if(code == 113) { // Q keycode
            parent.moveS(parent.curShape,'left');
        }else if(code == 100) { // D keycode
            parent.moveS(parent.curShape,'right');
        }else if(code == 115) { // S keycodel
            parent.moveS(parent.curShape,'down');
        }
    }
    
    Tetris.prototype.createShape=function(s){
        sIs=shapes[Math.floor((Math.random()*shapes.length))];
        var c='filled p'+s;
        for(i=0;i<sIs.length;++i){
            this.getO(sIs[i]).addClass(c+' m'+(sIs[i]-3));
        }
    }
    
    Tetris.prototype.moveS=function(s, dir){
        var sOs=this.getShapes(s);
        var canMove=sOs.length>0;
        var m=new Array();
        var parent=this
        sOs.each(function(){
            if(!canMove){return;}
            var i=parent.getI($(this));
            var ii=parent.getNextI(i,dir);
            m[i]=ii;
            if(ii>parent.width*parent.height||
                ((i%parent.width!==ii%parent.width)&&(Math.floor(i/parent.width)!==Math.floor(ii/parent.width)))||
                (parent.isFilled(ii)&&parent.getShapeName(ii)!==parent.getShapeName(i))){console.log(i);canMove=false;}
        });
        if(canMove){for(i=parent.width*parent.height;i>=0;i--){if(i in m){this.moveI(i,dir);}}this.clearMoves();}
        return canMove;
    }
    
    Tetris.prototype.rotate=function(s){
        var sOs=this.getShapes(s);
        var canMove=sOs.length>0;
        var parent=this
        var moves=new Array();
        sOs.each(function(){
            if(!canMove){return;}
            var i=parent.getI($(this));
            var ii=i;
            var mx=0;
            if($(this).hasClass('m0')){mx=3;ii=i+3}
            else if($(this).hasClass('m1')){mx=13;ii=i+2+parent.width}
            else if($(this).hasClass('m2')){mx=23;ii=i+1+2*parent.width}
            else if($(this).hasClass('m3')){mx=33;ii=i+3*parent.width}
            else if($(this).hasClass('m10')){mx=2;ii=i+2-parent.width}
            else if($(this).hasClass('m11')){mx=12;ii=i+1}
            else if($(this).hasClass('m12')){mx=22;ii=i+parent.width}
            else if($(this).hasClass('m13')){mx=32;ii=i-1+2*parent.width}
            else if($(this).hasClass('m20')){mx=1;ii=i+1-2*parent.width}
            else if($(this).hasClass('m21')){mx=11;ii=i-parent.width}
            else if($(this).hasClass('m22')){mx=21;ii=i-1}
            else if($(this).hasClass('m23')){mx=31;ii=i-2+parent.width}
            else if($(this).hasClass('m30')){mx=0;ii=i-3*parent.width}
            else if($(this).hasClass('m31')){mx=10;ii=i-1-2*parent.width}
            else if($(this).hasClass('m32')){mx=20;ii=i-2-parent.width}
            else if($(this).hasClass('m33')){mx=30;ii=i-3}
            if(parent.isFilled(ii)&&parent.getShapeName(ii)!==parent.getShapeName(i)){canMove=false;}
            moves.push({i:i,ii:ii,mx:'m'+mx});
        });
        if(!canMove){return false;}
        sOs.each(function(){
            $(this).removeClass('m0 m1 m2 m3 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33');
        });
        for(i=0;i<moves.length;++i){
            this.moveItoII(moves[i].i,moves[i].ii);
        }
        for(i=0;i<moves.length;++i){
            this.getO(moves[i].ii).addClass(moves[i].mx);
        }
        this.clearMoves();
        return true;
    }
    
    Tetris.prototype.testl=function(){
        var lines=0;
        for(i=0;i<this.height;++i){
            var line=true;
            for(j=0;j<this.width;++j){
                if(!this.isFilled(i*this.width+j)){line=false;break;}
            }
            if(line){
                lines++;
                for(k=i-1;k>=0;k--){for(j=0;j<this.width;++j){this.moveI(k*this.width+j,'down')}}
            }
        }
        this.lines+=lines;
        this.score+=lines*lines;
        this.clearMoves();
        return lines>0;
    }
    
    Tetris.prototype.display=function(){
        $('#nbLines span').text(this.lines);
        $('#score span').text(this.score);
    }
    Tetris.prototype.getNextI=function(i, dir){
        if(dir==='down'){return i+10;}
        if(dir==='left'){return i-1;}
        if(dir==='right'){return i+1;}
        return i;
    }
    Tetris.prototype.getO=function(i){
        return $('#p'+i);
    }
    Tetris.prototype.getI=function(o){
        return parseInt(o.attr('id').substring(1));
    }
    Tetris.prototype.isFilled=function(i){
        return $('#p'+i).hasClass('filled');
    }
    Tetris.prototype.getShapeName=function(i){
        if (!this.isFilled(i))
            return null;
        var classes = $('#p'+i).attr('class').split(' ');
        for(i=0;i<classes.length;++i){
            if(classes[i].substring(0,1)==='p'){return classes[i].substring(1);}
        }
        return '';
    }
    Tetris.prototype.getShapes=function(s){
        return $('.p'+s);
    }
    Tetris.prototype.moveI=function(i,dir){
        var ii=this.getNextI(i,dir);
        this.moveItoII(i,ii);
    }
    Tetris.prototype.moveItoII=function(i,ii){
        var p=this.getO(i);
        this.getO(ii).removeClass().addClass(p.attr('class')+ ' new');
        p.addClass('old');
    }
    Tetris.prototype.clearMoves=function(){
        $('.new').removeClass('old').removeClass('new');
        $('.old').removeClass();
    }

    $(document).ready(function(){
        var tetris=new Tetris(10, 20);
        tetris.init();
    });
</script>
{% endblock %}